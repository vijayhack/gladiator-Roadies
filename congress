object Cong {

  def main(args: Array[String]): Unit = {

    import scala.util.control.Breaks._

    var records: Int = 0
    records = scala.io.StdIn.readLine().toInt

    val test_case = new Array[String](records * 3)

    var record_ins_cnt: Int = 0

    for (i <- 1 to records) {
      test_case(record_ins_cnt) = scala.io.StdIn.readLine()
      record_ins_cnt += 1
      test_case(record_ins_cnt) = scala.io.StdIn.readLine()
      record_ins_cnt += 1
      test_case(record_ins_cnt) = scala.io.StdIn.readLine()
      record_ins_cnt += 1
    }

    var j = 0
    var columns: Int = 0

    while (j < record_ins_cnt) {
      val inp = test_case(j).split(" +")
      j += 1
      val rows = inp(0).toInt
      val cols = inp(1).toInt


      var phases_un = test_case(j).split(" +")
      j += 1
      var states_un = test_case(j).split(" +")
      j += 1

      val phases = for (p <- phases_un ) yield { cols - p.toInt }
      val states = for (s <- states_un ) yield { rows- s.toInt }

      var sum_p=0
      var sum_s=0

      for( p <- phases ) {sum_p +=p}
      for( s <- states ) {sum_s +=s}

      //for( p <- phases ) {print(p)}
      //println("")
      //for( s <- states ) {print(s)}
      //println("sum_P:"+sum_p+" sum_s:"+sum_s)
      if ( sum_p == sum_s) {println("YES")}
      else {println("NO")}

    }

  }
}
