object Bjp {

  def main(args: Array[String]): Unit = {

    import scala.util.control.Breaks._

    var records: Int = 0
    records = scala.io.StdIn.readLine().toInt

    val test_case = new Array[String](records * 3)

    var record_ins_cnt: Int = 0

    for (i <- 1 to records) {
      test_case(record_ins_cnt) = scala.io.StdIn.readLine()
      record_ins_cnt += 1
      test_case(record_ins_cnt) = scala.io.StdIn.readLine()
      record_ins_cnt += 1
      test_case(record_ins_cnt) = scala.io.StdIn.readLine()
      record_ins_cnt += 1
    }

    var j = 0
    var columns: Int = 0

    while (j < record_ins_cnt) {
      val inp = test_case(j).split(" +")
      j += 1
      val rows = inp(0).toInt
      val cols = inp(1).toInt

      var matrix = Array.ofDim[Int](rows,cols)

      var phases = test_case(j).split(" +")
      j += 1
      var states = test_case(j).split(" +")
      j += 1

      for( r <- 0 until rows) {
        var num = phases(r).toInt
        var dec_cols = cols -1
          for ( c <- 0 until num){
            matrix(r)(dec_cols) = 1
            dec_cols -= 1
          }

        //println("Num:"+num+" "+dec_cols)
      }


      var sum:Int = 0
      var result ="YES"
      for(  c <- 0 until cols)
        {
          sum = 0
          for( r <- 0 until rows ){
            sum +=matrix(r)(c)
            //println(s"($r)($c): ${matrix(r)(c)}")
          }
          //println(sum)
          //println (states(c).toInt)
          if ( sum != states(c).toInt ){result="NO"}
        }
      println(result)

    }

  }
  }
